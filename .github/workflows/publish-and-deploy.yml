name: Publish and Deploy

on:
  push:
    tags:
      - 'v*'

jobs:
  tagged-release:
    name: 'Tagged Release'
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - run: npm run doc:generate
      - run: npm pack
      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: false
          files: |
            liv-link-api-*.tgz
            doc/openapi.yaml
            doc/redoc.html
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: downcase REPO and ORG
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ORGANIZATION: ${{ github.repository_owner }}
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          echo "ORG=${GITHUB_ORGANIZATION,,}" >>${GITHUB_ENV}

      - name: Login to Docker GHCR
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo $GITHUB_TOKEN | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${REPO}:latest .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${REPO}:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-publish
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      SSH_USER: ${{ secrets.DEV_SSH_USER }}
      HOST: ${{ secrets.DEV_HOST }}
      ENV_PATH: ${{ secrets.DEV_SSH_ENV_PATH }}
      PORT: ${{ secrets.DEV_DEPLOY_PORT }}
    steps:
      - name: downcase REPO and ORG
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ORGANIZATION: ${{ github.repository_owner }}
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          echo "ORG=${GITHUB_ORGANIZATION,,}" >>${GITHUB_ENV}

      - name: write ssh key to file
        run: |
          echo "${{ secrets.DEV_SSH_KEY }}" > id_rsa
          chmod 400 id_rsa
      - name: Login to GHCR Docker
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa "${SSH_USER}@${HOST}" "echo $GITHUB_TOKEN | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin"
      - name: Remove old image and container
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa "${SSH_USER}@${HOST}" "docker rm -f livLinkApi || true && docker rmi ghcr.io/${REPO}:latest || true"
      - name: Download and run image
        run: |
          ssh -o StrictHostKeyChecking=no -i id_rsa "${SSH_USER}@${HOST}" "docker run -d --name livLinkApi -p ${PORT}:${PORT} -e PORT=${PORT} --env-file ${ENV_PATH} ghcr.io/${REPO}:latest"
